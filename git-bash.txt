查看用户名和邮箱：
git config user.name
git config user.email

设置用户名和邮箱：
git config --global user.name "Firstname Lastname"
git config --global user.email "your_email@example.com"

global表示全局可用，如果想设置为局部可用，删除global即可

将color.ui 设置为auto 可以让命令的输出拥有更高的可读性
git config --global color.ui auto
查看此设置的命令为：
git config color.ui

初始化Git仓库
git init

检查仓库的状态
git status

添加文件到Git仓库(此操作并未提交)
git add filename

提交文件到Git仓库
git commit -m "提交信息"

打印Git仓库提交日志
git log

查看Git仓库的分支情况
git branch

创建新的分支(创建一个名为C++的新分支)
git branch C++

切换到C++分支
git checkout C++

在创建分支时直接切换到该分支(在C++分支下创建新的分支C并切换到新的分支)
git checkout -b C

合并分支命令：
git branch master 切换到master分支
git merge C++ 将C++分支合并到master分支

删除分支命令：
git branch -d & git branch -D（强制删除）
git branch -d C 删除C分支

为当前分支添加标签v1.0
git tag v1.0

查看当前分支标签
git tag

切换到该标签下的代码状态
git checkout v1.0

清除Git Bash屏幕的操作
clear

利用SSH完成Git与Github的绑定

第一步：生成SSH key

1.查看主机是否安装SSH，在Git Bash中输入ssh

2.输入ssh-keygen -t rsa命令，表示我们指定RSA算法生成密钥，然后敲击三次回车，期间不需要输入密码，之后生成两个文件ida_rsa和ida_rsa.pub,即密钥ida_rsa和公钥ida_rsa.pub。生成文件的目录位于：C:\Users\user\.ssh

3.把公钥ida_rsa.pub添加到Github.请在Github网站上操作

第二步：添加SSH Key

第三步：验证绑定是否成功
ssh -T git@github.com

通过Git将代码提交到Github

两个常用的命令push和pull

1.push：该单词直译过来就是“推”的意思，如果我们本地的代码有了更新，为了保持本地与远程的代码同步，我们就需要把本地的代码推到远程的仓库，代码示例：
git push origin master

2.pull：该单词直译过来就是“拉”的意思，如果我们远程仓库的代码有了更新，同样为了保持本地与远程的代码同步，我们就需要把远程的代码拉到本地，代码示例：
git pull origin master

此外，在之前我们讲到过pull request，在这里，估计大家就能更好的理解了，它表示：如果我们fork了别人的项目（或者说代码），并对其进行了修改，想要把我们的代码合并到原始项目（或者说原始代码）中，我们就需要提交一个pull request，让原作者把我们的代码拉到 ta 的项目中，至少对于 ta 来说，我们都是属于远程端的。



一般情况下，我们在push操作之前都会先进行pull操作，这样不容易造成冲突。

提交代码：

对于向远处仓库（GitHub）提交代码，我们可以细分为两种情况：

第一种：本地没有 Git 仓库，这时我们就可以直接将远程仓库clone到本地。通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者添加等操作，然后commit即可。

接下来，以我自己Github账号中的C-Source项目为例，地址为：https://github.com/masterjia/C-Source.git

然后在Git Bash窗口中，首先切换到路径D:\CoderLife\GitRepo

然后执行命令：git clone https://github.com/masterjia/C-Source.git

查看目录，我们已经把C-Source仓库clone到本地了

